package generator

import java.nio.file.Path

/**
 * Created by r.oblak on 9/8/2015.
 */
class MainWriter(val targetSetting: TargetSetting,
                 doIOS: Boolean,
                 doAndroid: Boolean,
                 languageCodeResolver: LanguageCodeResolver,
                 translationItems: List<TranslationItem>,
                 outputPathPrefix: Path,
                 verbosePrintout: Boolean,
                 iosKeyCaseType: IOSKeyCaseType?) {

    private val languages: List<String> by lazy {
        if (targetSetting.targetLanguages.isEmpty()) {
            /* if there aren't any targetLanguages in target settings, take all the targetLanguages from the first translations item */
            translationItems.first().translations.keys.toList()
        } else {
            targetSetting.targetLanguages
        }
    }

    private val writeIOS by lazy { targetSetting.doAndroid && doIOS }
    private val writeAndroid by lazy { targetSetting.doAndroid && doAndroid }

    private val iOSWriter by lazy {
        IOSWriter(targetSetting.relativePathIOS!!, languageCodeResolver, translationItems, languages, targetSetting.defaultLanguage, outputPathPrefix, verbosePrintout)
    }

    private val iOSTranslationKeysWriter by lazy {
        IOSTranslationKeysWriter(targetSetting.relativePathIOS!!, languageCodeResolver, translationItems, languages, targetSetting.defaultLanguage, outputPathPrefix, iosKeyCaseType, verbosePrintout)
    }

    private val androidWriter by lazy {
        AndroidWriter(targetSetting.relativePathAndroid!!, languageCodeResolver, translationItems, languages, targetSetting.defaultLanguage, outputPathPrefix, verbosePrintout)
    }

    /**
     * the paths of all the files to be generated by this writer - by its android and ios writers for all of this client's targetLanguages
     */
    val generatedFilePaths: List<Path> by lazy {
        mutableListOf<Path>().apply {
            if (writeAndroid) addAll(androidWriter.getAllResolvedPaths(languages))
            if (writeIOS) addAll(iOSWriter.getAllResolvedPaths(languages))
        }
    }

    /**
     * Write the translations for both platforms
     */
    fun writeAll(): Boolean {
        var success = true
        if (writeAndroid) {
            success = success and androidWriter.writeAll()
        }
        if (writeIOS) {
            success = success and iOSWriter.writeAll() and iOSTranslationKeysWriter.writeAll()
        }
        return success && (writeIOS || writeAndroid)
    }
}
